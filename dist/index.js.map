{"version":3,"sources":["package.json","libs/object.js","libs/array.js","libs/function.js","libs/types.js","libs/url.js","libs/number.js","libs/string.js","libs/date.js","libs/other.js","libs/prototype.js","index.js"],"names":["module","exports","name","version","description","main","scripts","test","start","build","repository","keywords","author","license","deepClone","obj","Array","map","row","Object","ret","keys","forEach","key","Date","getTime","orderBy","arr","props","orders","sort","a","b","reduce","acc","prop","i","p1","p2","findPathByLeafId","leafIdName","leafId","nodes","path","length","tmpPath","push","children","findResult","uniqueBy","filter","element","index","array","findIndex","unique","indexOf","throttle","fn","delay","timer","status","clearTimeout","call","arguments","setTimeout","$isNull","value","prototype","toString","$isUndefined","$isBoolean","$isNumber","$isString","$isSymbol","$isObject","$isRegExp","$isArray","$isFunction","Url","url","options","replace","$0","$1","val","encodeURIComponent","undefined","Error","URLSearchParams","param","JSON","stringify","join","maps","split","res","decodeURIComponent","randomNum","min","max","Math","floor","random","round","n","decimals","Number","sum","sumBy","toDecimalMark","num","toLocaleString","mask","cc","slice","randomHexColorCode","formatTime","format","date","o","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","dayNames","getDay","k","RegExp","getFullYear","substr","_year","formatHMS","s","str","getRate","rate","String","match_all","reg","exec","utilscore","types","other","packageJSON","global"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["module.exports={name:\"jstools\",version:\"0.0.10\",description:\"javascript 工具函数包\",main:\"index.js\",scripts:{test:'echo \"Error: no test specified\" && exit 1',start:\"parcel index.js\",build:\"parcel build index.js\"},repository:{},keywords:[\"jstools\",\"common\",\"commonJS\",\"common-js\",\"util\",\"utils\",\"lib\",\"libs\",\"javascript\"],author:\"jaymo\",license:\"ISC\"};","\n/**\n * 深度克隆\n * @param {*} obj \n */\nexport const deepClone = (obj) => {\n    if(null === obj){\n        return obj;\n    }\n    if(obj instanceof Array){\n        return obj.map(row => deepClone(row));\n    }\n    if(obj instanceof Object){\n        let ret = {};\n        Object.keys(obj).forEach(key =>{\n            if(obj[key] instanceof Date){\n                ret[key] = new Date(obj[key].getTime());\n            } else {\n                ret[key] = deepClone(obj[key]);\n            }\n        });\n        return ret;\n    }\n    return obj;\n};\n\n\n/**\n * 返回按属性(props)和顺序(orders)排序的对象数组。\n * @param {*} arr \n * @param {*} props \n * @param {*} orders \n */\nexport const orderBy = (arr, props, orders) => {\n    return [...arr].sort((a, b) =>\n    props.reduce((acc, prop, i) => {\n      if (acc === 0) {\n        const [p1, p2] = orders && orders[i] === 'desc' ? [b[prop], a[prop]] : [a[prop], b[prop]];\n        acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;\n      }\n      return acc;\n    }, 0)\n  );\n}\n\n\n\n/**\n * 根据 key 递归查找链带关系\n * @param {sting} leafIdName  \n * @param {any} leafId  \n * @param {array} nodes 被查找的数组\n * @param {array} path 非必填 \n * @param {array} path 非必填 \n * @example let arr = [\n                    {\n                        name:'awefawef',\n                        id:111,\n                        children:[\n                            {\n                                name:'2222222aaa',\n                                id:222,\n                                children:[\n                                    {\n                                        name:'cccccaaa',\n                                        id:333,\n                                    }\n                                ]\n                            }\n                        ]\n                }\n            ]\n            findPathByLeafId('id',333,arr) // => [{\"id\":111,\"value\":\"awefawef\"},{\"id\":222,\"value\":\"2222222aaa\"}]\n */\nexport const findPathByLeafId = (leafIdName,leafId, nodes, path = []) => {\n    for(var i = 0; i < nodes.length; i++) {\n        var tmpPath = [...path];\n        if(leafId == nodes[i][leafIdName]) {\n            return tmpPath;\n        }\n\n        tmpPath.push({\n            [leafIdName]:nodes[i][leafIdName],\n            value:nodes[i].name\n        });\n        if(nodes[i].children) {\n            let findResult = findPathByLeafId(leafIdName,leafId, nodes[i].children, tmpPath);\n            if(findResult) {\n                return findResult;\n            }\n        }\n    }\n}\n  ","/**\n * 根据属性去重数组\n * @param {array} arr 去重的数组\n * @param {string} key 去重的key\n * @example unique([{name:'1111'},{name:'1111'},{name:'222'},{name:'333'}],'name') => [{name:'1111'},{name:'222'},{name:'333'}\n */\nexport const uniqueBy = function(arr,key){\n    return arr.filter((element,index,array)=>array.findIndex(row=>row[key]===element[key]) === index)\n}\n\n\n/**\n * 普通数组去重\n * @param {array} arr 去重的数组\n * @example unique2([1,2,2,3,4,3,4,7]) => [1, 2, 3, 4, 7]\n */\nexport const unique = (arr) =>\n    arr.filter((element,index,array)=>array.indexOf(element) === index)","/**\n * 函数节流(首次执行)\n * @param {*} fn \n * @param {*} delay \n * @param {*} type \n */\nexport const  throttle = function (fn,delay=3000){\n\n\tlet timer = null;\n\tlet status = true;\n\tclearTimeout(timer);\n\tif(status){\n\t\tstatus = false;\n\t\tfn.call(this,arguments);\n\t}\n\ttimer = setTimeout(()=>status = true, delay);\n}\n\n","\n/**\n * 判断类型Null\n * @param {any} value \n */\nexport const $isNull = value => Object.prototype.toString.call(value) == \"[object Null]\"\n\n/**\n * 判断类型Undefined \n * @param {any} value \n */\nexport const $isUndefined = value => Object.prototype.toString.call(value) == \"[object Undefined]\"\n\n/**\n * 判断类型Boolean\n * @param {any} value \n */\nexport const $isBoolean = value => Object.prototype.toString.call(value) == \"[object Boolean]\"\n\n/**\n * 判断类型Number\n * @param {any} value \n */\nexport const $isNumber = value => Object.prototype.toString.call(value) == \"[object Number]\"\n\n/**\n * 判断类型String\n * @param {any} value \n */\nexport const $isString = value => Object.prototype.toString.call(value) == \"[object String]\"\n\n/**\n * 判断类型Symbol\n * @param {any} value \n */\nexport const $isSymbol = value => Object.prototype.toString.call(value) == \"[object Symbol]\"\n\n/**\n * 判断类型Object\n * @param {any} value \n */\nexport const $isObject = value => Object.prototype.toString.call(value) == \"[object Object]\"\n\n/**\n * 判断类型RegExp\n * @param {any} value \n */\nexport const $isRegExp = value=> Object.prototype.toString.call(value) == \"[object RegExp]\"\n\n/**\n * 判断类型Array\n * @param {any} value \n */\nexport const $isArray = value => Object.prototype.toString.call(value) == \"[object Array]\"\n\n/**\n * 判断类型Function\n * @param {any} value \n */\nexport const $isFunction = value => Object.prototype.toString.call(value) == \"[object Function]\"","import { $isObject, $isString } from './types'\n/**\n * 请求参数\n * @param {*} url \n * @param {Object} options \n * @example Url('http://www.baidu.com?:name',{name:'ceshi'}) // => http://www.baidu.com?ceshi\n */\nexport const Url = (url, options = {}) => {\n    return url.replace(/:([a-zA-Z0-9_]{1,})/g, ($0, $1) => {\n        let val = encodeURIComponent(options[$1]);\n        if (val === undefined) {\n            new Error(`URL ${url} not find ${$1}`);\n        }\n        return val;\n    })\n}\n\n\n/**\n * url 序列化和反序列化\n * @param {Object||String} param \n * @example URLSearchParams('https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=parseQueryString&rsv_pq=8c7a6d0000146171&rsv_t=43d6RzTiyjUjUKtQtqfR3XL25JepKFwJYvvSpsj%2BJ7aFqxdBLDungY%2Bfx%2BE&rqlang=cn&rsv_enter=1&rsv_n=2&rsv_sug3=1') // => \n *  // {\n    //    \"ie\":\"utf-8\",\n    //    \"f\":\"8\",\n    //    \"rsv_bp\":\"1\",\n    //    \"rsv_idx\":\"1\",\n    //    \"tn\":\"baidu\",\n    //    \"wd\":\"parseQueryString\",\n    //    \"rsv_pq\":\"8c7a6d0000146171\",\n    //    \"rsv_t\":\"43d6RzTiyjUjUKtQtqfR3XL25JepKFwJYvvSpsj+J7aFqxdBLDungY+fx+E\",\n    //    \"rqlang\":\"cn\",\n    //    \"rsv_enter\":\"1\",\n    //    \"rsv_n\":\"2\",\n    //    \"rsv_sug3\":\"1\"\n    // }\n *  // utilscore.URLSearchParams({\n    // \tname:'cgx',\n    // \ttest:'ceshi'\n    // })\n    // // => \"name=cgx&test=ceshi\"\n */\n\nexport const URLSearchParams = (param) => {\n    if ($isObject(param)) {\n        return Object.keys(param).map(key => `${key}=${encodeURIComponent(JSON.stringify(param[key]))}`).join('&')\n    } else if ($isString(param)) {\n        let maps = {};\n        param.replace(/^.[^\\?]*\\?/g, '').split('&').forEach(res => {\n            let row = decodeURIComponent(res).split('=');\n            maps[row[0] + ''] = decodeURIComponent(row[1])\n        });\n        return maps\n    }\n}\n","/**\n * 返回指定范围内的随机整数。\n * @param {number} min 最小值\n * @param {number} max 最大值\n */\nexport const randomNum = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n/**\n * 将数字四舍五入到指定的小数位数。\n * @param {number} n 操作的数字\n * @param {number} decimals 精确到几位小数 \n */\nexport const round = (n, decimals = 0) => {\n    return Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`)\n}\n\n\n/**\n * 返回两个或两个以上数字/数字数组中元素之和。\n * @param  {...any} arr 操作的数组 \n */\nexport const sum = (...arr) => [...arr].reduce((acc, val) => acc + val, 0);\n\n\n/**\n * 根据函数映射每个元素，然后返回数组的和\n * @param {*} arr \n * @param {*} fn \n */\nexport const sumBy = (arr, fn) =>\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0);\n\n/**\n * 将数字转化为千分位格式\n * @param {*} num \n */\nexport const toDecimalMark = num => num.toLocaleString('en-US');","/**\n * 使用 * 遮蔽字符串\n * @param {*} cc \n * @param {*} num \n * @param {*} mask \n * @example\n */\nexport const mask = (cc, num = 4, mask = '*') =>('' + cc).slice(0, -num).replace(/./g, mask) + ('' + cc).slice(-num);\n\n/**\n * 生成一个随机的十六进制颜色代码。\n */\nexport const randomHexColorCode = () => {\n    let n = ((Math.random() * 0xfffff) | 0).toString(16);\n    return '#' + (n.length !== 6 ? ((Math.random() * 0xf) | 0).toString(16) + n : n);\n  };","/**\n * 格式化时间\n * @param {*} obj \n * @param {*} format \n * @example utils.formatTime(new Date(),'yyyy-M-d h:m:s D') // => 2019-05-10 17:37:24 星期六\n */\nexport const formatTime = (obj, format) => {\n    if (format) {\n      var date;\n      if (obj instanceof Date) {\n        date = obj;\n      } else {\n        date = new Date(obj);\n      }\n      var dayNames = ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日',]\n\n      var o = {\n        'M+': date.getMonth() < 9 ? \"0\" + (date.getMonth() + 1) : (date.getMonth() + 1), // 月份\n        'd+': date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate(), // 日\n        'h+': date.getHours(), // 小时\n        'm+': date.getMinutes(), // 分\n        's+': date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds(), // 秒\n        'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\n        'S+': date.getMilliseconds(), // 毫秒\n        'D+': dayNames[date.getDay()], //星期\n      };\n\n      if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\n      for (var k in o) {\n        if (new RegExp(`(${k})`).test(format)) {\n          format = format.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((`\n00${o[k]}`).substr((`${o[k]}`).length)));\n        }\n      }\n      return format;\n    } else {\n      let date = new Date(obj)\n      let _year = date.getFullYear(),\n        _month = (date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : '0' + (date.getMonth() + 1),\n        _date = date.getDate(),\n        _hour = date.getHours(),\n        _minute = date.getMinutes(),\n        _second = date.getSeconds()\n      return _year + '-' + _month + '-' + _date + ' ' + _hour + ':' + _minute + ':' + _second\n    }\n  }\n\n\n  /**\n   * @param  {s} 秒数\n   * @return {String} 字符串\n   * @example formatHMS(3610) // -> 1h0m10s\n   */\n  export const formatHMS = (s) => {\n    var str = ''\n    if (s > 3600) {\n      str = Math.floor(s / 3600) + 'h' + Math.floor(s % 3600 / 60) + 'm' + s % 60 + 's'\n    } else if (s > 60) {\n      str = Math.floor(s / 60) + 'm' + s % 60 + 's'\n    } else {\n      str = s % 60 + 's'\n    }\n    return str\n  }","/**\n * 评分组件\n * @param {Number} rate max 5\n * @example getRate(2)   //★★☆☆☆\n */\nexport const getRate =  (rate) => {\n    return '★★★★★☆☆☆☆☆'.slice(5 - rate, 10 - rate);\n}","String.prototype.match_all = function(reg){\n\tvar arr = []\n\tvar str = this;\n\tvar s = '';\n\twhile ((s = reg.exec(str)) != null) {\n\t\tarr.push(s[1])\n\t} \n\treturn arr\n}\t\n","\nimport packageJSON from './package.json'\nimport * as obj from './libs/object' \nimport * as arr from './libs/array' \nimport * as fn from './libs/function' \nimport * as url from './libs/url' \nimport * as types from './libs/types' \nimport * as num from './libs/number' \nimport * as str from './libs/string' \nimport * as date from './libs/date'\nimport * as other from './libs/other'\n\nimport './libs/prototype'\n\nconst utilscore = {\n    ...obj,\n    ...arr,\n    ...date,\n    ...fn,\n    ...str,\n    ...num,\n    ...types,\n    ...url,\n    ...other,\n    version:packageJSON.version,\n}\n\nglobal.utilscore = utilscore\n\nfor(let key in utilscore){\n\texports[key] = utilscore[key]\n}\n\n\n"]}